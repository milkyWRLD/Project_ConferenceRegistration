@page "/edit-participant/{id}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using ConferenceFrontend.Models

<h3>Редактировать участника</h3>

@if (participant is null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <EditForm Model="participant" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="fullName">ФИО</label>
            <InputText id="fullName" class="form-control" @bind-Value="participant.FullName" />
        </div>

        <div class="form-group">
            <label for="workplace">Место работы</label>
            <InputText id="workplace" class="form-control" @bind-Value="participant.Workplace" />
        </div>

        <div class="form-group">
            <label for="role">Роль</label>
            <InputText id="role" class="form-control" @bind-Value="participant.Role" />
        </div>

        <div class="form-group">
            <label for="contactInfo">Контактная информация</label>
            <InputText id="contactInfo" class="form-control" @bind-Value="participant.ContactInfo" />
        </div>

        <button type="submit" class="btn btn-primary">Сохранить</button>
    </EditForm>
}

@code {
    [Parameter] public int id { get; set; }
    private Participant? participant;

    protected override async Task OnInitializedAsync()
    {
        participant = await Http.GetFromJsonAsync<Participant>($"https://localhost:5001/api/participants/{id}");
    }

    private async Task HandleValidSubmit()
    {
        var response = await Http.PutAsJsonAsync($"https://localhost:5001/api/participants/{id}", participant);
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/participants");
        }
    }
}
